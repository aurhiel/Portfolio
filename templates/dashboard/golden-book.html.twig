{% extends 'base.html.twig' %}
{% set core_class = 'app-core--golden-book app-core--hide-menu' %}

{# Add Stylesheets #}
{% block stylesheets %}
  <link rel="stylesheet" href="{{ asset('build/golden-book.css') }}">
{% endblock %}

{% block body %}
  <div class="app-main-content">
    <section class="app-section">
      <h1 class="heading h3 text-center my-4 mt-md-2" data-text="Livre d'Or"
        style="--heading-text-drop-offset: -2.3em;">
        Livre d'Or
      </h1>
      <div class="description small text-muted text-center mx-auto mb-4">
        <p class="mb-1">
          Bienvenue sur l'espace de saisi de votre témoignage, {{ client.firstname }}.
        </p>
        <p class="mb-1">
          Je vous ai récemment contacté afin que vous me donniez votre avis
          sur mon travail passé ou en cours.
        </p>
        <p class="mb-0">
          Vous trouverez donc ci-dessous un formulaire pour que vous puissiez me
          faire ce retour en quelques mots, il sera ensuite visible sur la page
          d'accueil du site, une fois validé.
        </p>
      </div>

      <form class="form text-center" method="post">
        <label for="testimonial-message" class="sr-only">Témoignage</label>
        <textarea class="form-control form-control--bordered" id="testimonial-message"
          name="testimonial-message" rows="6" maxlength="400" required="required"
            placeholder="Saisissez ici votre témoignage...">{{ testimonial.message }}</textarea>
        <small id="testimonial-message-help-text" class="form-text text-muted text-right pr-1">
          <span class="-max-text">Maximum </span><b class="-nb-caracs">400</b> caractères.
        </small>

        <div class="testimonial-sign-type text-left row mx-0 mt-2 px-2">
        {% for signType in testimonial.signTypes %}
          <div class="custom-control custom-control--bordered custom-radio mt-2 col-sm-{% if loop.last %}4{% else %}4{% endif %}">
            <input type="radio" id="testimonial-sign-type-{{ signType }}" name="testimonial-sign-type"
              class="custom-control-input" {% if signType == testimonial.signType or (loop.last and testimonial.signType == '') %}checked="checked"{% endif %} value="{{ signType }}">
            <label class="custom-control-label text-left" for="testimonial-sign-type-{{ signType }}">
              {{ ('form_testimonial.' ~ signType ~ '.label')|trans }}
              <small class="text-hint">
                {% if signType == 'both' %}
                  {{ testimonial.client.firstname }} {{ testimonial.client.lastname|first }}. - <b>{{ testimonial.client.company }}</b>
                {% elseif signType == 'company'%}
                  <b>{{ testimonial.client.company }}</b>
                {% else %}
                  {{ testimonial.client.firstname }} {{ testimonial.client.lastname|first }}.
                {% endif %}
              </small>
            </label>
          </div>
        {% endfor %}
        </div>

        <button class="btn btn-primary mt-3" type="submit" name="testimonial-send" value="exec">
          Envoyer
        </button>
      </form>
    </section>
  </div>
{% endblock %}

{% block footer %}{# hide footer #}{% endblock %}

{% block javascripts %}
<script type="text/javascript">
  var input_msg       = document.getElementById('testimonial-message');
  var msg_help_text   = document.getElementById('testimonial-message-help-text');
  var help_nb_caracs  = msg_help_text.getElementsByClassName('-nb-caracs')[0];
  var max_text        = msg_help_text.getElementsByClassName('-max-text')[0];

  function update_nb_caracs() {
      // Update max caracters
      help_nb_caracs.innerHTML = ((input_msg.value.length > 0) ? input_msg.value.length + '/' : '') + parseInt(input_msg.getAttribute('maxlength'));

      // Hide / show "Maximum " text
      if (input_msg.value.length > 0) max_text.classList.add('d-none');
      else max_text.classList.remove('d-none');
  }

  // Key up AND down event for testimonial message
  input_msg.addEventListener('keyup',   update_nb_caracs);
  input_msg.addEventListener('keydown', update_nb_caracs);
  // Auto-trigger keydown event on load
  input_msg.dispatchEvent(new Event('keydown'));
</script>
{% endblock %}
